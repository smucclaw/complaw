{-# LANGUAGE OverloadedStrings, DuplicateRecordFields, QuasiQuotes #-}
{-# OPTIONS_GHC -F -pgmF=record-dot-preprocessor #-}

-- DO NOT EDIT THIS FILE!
-- direct edits will be clobbered.
-- 
-- this file is autogenerated!
-- open the parent README.org in emacs and hit   C-c C-v t   to regenerate this file.

module L4.Types where
import qualified Data.List.NonEmpty as NE
import Data.List.NonEmpty (NonEmpty)
import Data.Map
import Data.Time.Calendar
import Data.Time.Format.ISO8601
import Data.List (intercalate)

data L4Program = L4Program
  { statements :: [Statement]
  , hints :: [L4Hint]
  } deriving (Show, Eq)

data StmCommon = Stm { src      :: String
                     , filename :: String
                     , lineno   :: Int
                     , ruleno   :: Maybe Int
                     } deriving (Show, Eq)

data Statement = Deem { hornHead :: HornHead
                      , hornBody :: HornBody
                      , raw :: StmCommon }
                 | Define { raw :: StmCommon }
                 | Reg { preconditions :: ConditionExpr
                       , conditions    :: ConditionExpr
                       , parties       :: NonEmpty Party
                       , deontic       :: Deontic
                       , action        :: Action
                       , actionSpec    :: ActionSpec
                       , temporal      :: Temporal
                       , raw           :: StmCommon
                       }
  deriving (Show, Eq)

data HornHead = HHOP ObjectPredicate
  deriving (Show, Eq)

type ObjectPredicate = ObjectAttribute

data ObjectAttribute = MkOP ObjectSpec AttributeName deriving (Eq)
instance Show ObjectAttribute where show (MkOP (ObjectSpec os) pa) = intercalate "." (NE.toList os ++ [pa])

data ObjectSpec = ObjectSpec (NonEmpty String) deriving Eq
instance Show ObjectSpec where show (ObjectSpec os) = intercalate "." (NE.toList os)

type AttributeName = String

type HornBody = ConditionExpr

type Party      = String
type Action     = String
type ActionSpec = String
type Temporal   = String
data Deontic    = MUST | MAY | SHANT deriving (Show, Eq)
data ConditionExpr = MkCE  Probability LeafCE
                   | CEOr  ConditionExpr ConditionExpr
                   | CEAnd ConditionExpr ConditionExpr
                   deriving (Show, Eq)
data LeafCE = CEOP    ObjectPredicate
            | CEMatch ObjectAttribute MatchOp MatchRHS
            | CEStr   String
  deriving (Show, Eq)

data MatchOp = MatchTilde
  deriving (Show, Eq)

data MatchRHS = MatchString String
              | MatchList [MatchRHS]
  deriving (Show, Eq)

data Probability = Likely | Normal | Unlikely deriving (Show, Eq)

data L4Hint = L4Hint { raw :: StmCommon }
  deriving (Show, Eq)
