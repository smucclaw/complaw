-- DO NOT EDIT THIS FILE!
-- direct edits will be clobbered.
--
-- this file is autogenerated!
-- open the parent README.org in emacs and hit   C-c C-v t   to regenerate this file.
concrete PotatoEng of Potato = open SyntaxEng, ParadigmsEng, SymbolicEng, ExtraEng in {
lincat
  Rule = SyntaxEng.S ;
  Party = SyntaxEng.NP ;
  Object = SyntaxEng.NP ;
  Action = SyntaxEng.VP ;
  Modal = {
    verb : SyntaxEng.VV ;
    pol : SyntaxEng.Pol
    } ;

lin
 -- : Party -> Modal -> Action -> Rule
 MkRule party modal action =
   let modalAction : VP = -- apply the modal to the action: [may]+[plant cabbage]
         SyntaxEng.mkVP modal.verb action ;
       clause : Cl =  -- Combine subject and predicate into a clause.
         SyntaxEng.mkCl party modalAction ; -- Still open for polarity.
    in SyntaxEng.mkS modal.pol clause ; -- Polarity comes from modal

 -- : String -> Party
 MkParty str = SymbolicEng.symb str ;

 -- : Party
 Everybody = SyntaxEng.everybody_NP ;
 Nobody = SyntaxEng.nobody_NP ;

 -- : Modal
 May = {
   verb = ExtraEng.may_VV ;
   pol = SyntaxEng.positivePol
   } ;
 Must = {
   verb = SyntaxEng.must_VV ;
   pol = SyntaxEng.positivePol
   } ;
 Shant = { -- The verb is "shall", and the whole sentence will be negated.
   verb = ExtraEng.shall_VV ;
   pol = SyntaxEng.negativePol
   } ;

 -- : Object -> Action
 Trade p = SyntaxEng.mkVP trade_V2 p ;
 Plant p = SyntaxEng.mkVP plant_V2 p ;

 -- : Object
 Potato = -- mkNP with aPl_Det makes indefinite plural
   SyntaxEng.mkNP SyntaxEng.aPl_Det potato_N ;
 Cabbage = -- just mkNP makes a mass noun
   SyntaxEng.mkNP cabbage_N ;

oper
 trade_V2 : V2 = mkV2 "trade" ;
 plant_V2 : V2 = mkV2 "plant" ;
 potato_N : N = mkN "potato" ;
 cabbage_N : N = mkN "cabbage" ;
}
