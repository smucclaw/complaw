{-# LANGUAGE OverloadedStrings, DuplicateRecordFields, QuasiQuotes #-}
{-# OPTIONS_GHC -F -pgmF=record-dot-preprocessor #-}

-- DO NOT EDIT THIS FILE!
-- direct edits will be clobbered.
-- 
-- this file is autogenerated!
-- open the parent README.org in emacs and hit   C-c C-v t   to regenerate this file.

module Main where

import Test.Hspec.Megaparsec
import Test.Hspec
import Data.Maybe
import Data.Map
import Data.List.Split
import Control.Monad
import Data.Tree
import Control.Arrow
import Debug.Trace
import L4.Types
import L4.Parser
import Text.Megaparsec
import Data.List.NonEmpty (NonEmpty((:|)))
import GF.Paraphrase (paraphraseString)
import PGF (PGF, readPGF)

main :: IO ()
main = do
  gr <- readPGF "src/GF/Potato.pgf"
  forM_ [spec1, spec2 gr] $ hspec
  return ()

emptyProgram1 :: String
emptyProgram1 = "\n"

simpleDeem1 :: String
simpleDeem1 = "RULE 2\nDEEM Item.isPotato\nWHEN Item.species ~ [\"Solanum tuberosum\"]"

spec1 :: Spec
spec1 = do
  describe "L4 Types" $ do
    it "a program is a list of zero or more statements" $
      parse l4program "" `shouldSucceedOn` emptyProgram1
    it "zero statements" $
      parse l4program "" emptyProgram1 `parseSatisfies` \l4 -> l4.statements == []
    it "a statement starts with a rule number" $
      parse l4program "" `shouldSucceedOn` simpleDeem1
    it "rule number 2" $
      parse l4program "" simpleDeem1 `parseSatisfies` \l4 -> head l4.statements == Deem
        { hornHead = HHOP (MkOP (ObjectSpec $ "Item" :| []) "isPotato")
        , hornBody = MkCE Normal (CEStr "Item.species ~ [\"Solanum tuberosum\"]")
        , raw = Stm "source text" "filename" 0 (Just 2) }

spec2 :: PGF -> Spec
spec2 gr = do
  describe "Paraphrasing" $ do
    it "should paraphrase a sentence and preserve its semantics" $
         paraphraseString gr "everybody shan't plant cabbage"
                  `shouldBe` "nobody may plant cabbage"
    it "should not change a sentence that can't be paraphrased" $
         paraphraseString gr "Meng shan't plant cabbage"
                  `shouldBe` "Meng shan't plant cabbage"
